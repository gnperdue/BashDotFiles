export PATH=$PATH:~/Scripts:~/Dropbox/UnixSettings/LocalScripts

# Tiger fix for "man"
export MANPATH=/usr/share/man:$MANPATH
#Needed for Tiger
alias ssh="ssh -Y"
#alias ssh="ssh -Y -x"

# move /usr/loca/bin up front for brew
export PATH=/usr/local/bin:$PATH
## Adding Racket to my PATH
export PATH=/Applications/Racket\ v5.3.1/bin:$PATH
# Haskell cabal
export PATH=$HOME/.cabal/bin:$PATH

# Boost
# Uncomment if you need it...
# export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/usr/local/boost_1_53_0/lib

# Scala & Java
# export CLASSPATH=
# tarred up /System/Library/Frameworks/JavaVM.framework... this didn't work
export JAVA_HOME=$(/usr/libexec/java_home)
#
# alt java setup - doesn't work, no `java_home` exe available?
# export PATH=$PATH:/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/bin
# export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home
#
# export SCALA_HOME=/usr/local/Cellar/scala/2.10.0/libexec/
# export SCALA_HOME=/usr/local/Cellar/scala29/2.9.2/libexec/
# export JAVACMD=drip
# export DRIP_SHUTDOWN=30

# java8 dropped support for PermSize and MaxPermSize
# export SBT_OPTS="-XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:PermSize=128M -XX:MaxPermSize=512M"
export SBT_OPTS="-XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled"
# nailgun
export NAILGUNLOC=/Users/gnperdue/Dropbox/Programming/Programming/Java/nailgun/nailgun-server/target
# Weka
export WEKAPATH=$HOME/Software/weka-3-7-11

# Coding Stuff
alias rracket="racket -il readline"

source ~/perl5/perlbrew/etc/bashrc
# This will move /usr/local back to front to keep homebrew happy
export PATH="${PATH/\/usr\/local\/bin:/}"
export PATH=/usr/local/bin:$PATH

# Wicked Cool...
export PATH=$PATH:${HOME}/Dropbox/UnixSettings/WickedCoolScripts

# For DocBook / AsciiDoc
export XML_CATALOG_FILES=/usr/local/etc/xml/catalog


# OCLint
# export OCLINT_HOME=$HOME/Dropbox/Programming/Programming/CPP/style/oclint-0.7-x86_64-apple-darwin-10
# export PATH=$PATH:$OCLINT_HOME/bin

# CPPLint
export PATH=$PATH:${HOME}/Dropbox/Programming/Programming/CPP/style

# vim 7.4
export PATH=${HOME}/Software/vim_install/bin:$PATH
# export PATH=${HOME}/Software/vipy2/bin:$PATH

# Setting PATH for Python 2.7
#  Still installed, but using Anaconda for now...
# export PATH=/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}
# alias ipy="echo 'ipython --pylab' && ipython --pylab"
# alias ipq="echo 'ipython qtconsole --pylab=inline' && ipython qtconsole --pylab=inline"
# alias ipn="echo 'ipython notebook --pylab=inline' && ipython notebook --pylab=inline"

# Python3
#  Still installed, but using Anaconda for now...
# export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/3.4/bin

# Anaconda3 
# NOTE: ipython notebook --pylab=inline
# [E 09:28:19.130 NotebookApp] Support for specifying --pylab on the command line has been removed.
# [E 09:28:19.130 NotebookApp] Please use `%pylab inline` or `%matplotlib inline` in the notebook itself.
#
export PATH="/Users/gnperdue/anaconda/bin:$PATH"
alias ipy="echo 'ipython --pylab' && ipython --pylab"
alias ipq="echo 'ipython qtconsole --pylab=inline' && ipython qtconsole --pylab=inline"
alias ipn="echo 'jupyter notebook: use %pylab inline or %matplotlib inline' && jupyter notebook"

# Other tools and scripts
export PATH=$HOME/bin:$PATH

# bash completion
# v1.3
if [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi

# Use these as a template, but not keeping Weka tab completion in by default...
# weka-classes () {
#       unzip -l $WEKAPATH/weka.jar |
#       gsed -rne 's/.*(weka)\/([^g])([^$]*)\.class$/\2\3/p' |
#       tr '/' '.'
# }
#
# weka-folders () {
#       unzip -l $WEKAPATH/weka.jar |
#       gsed -rne 's/.*(weka)\/([^g])([^$]*)\/$/\2\3\./p' |
#       tr '/' '.'
# }
#
# _completeweka() {
#   local curw=${COMP_WORDS[COMP_CWORD]}
#   local wordlist=$(weka-folders; weka-classes)
#   COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
#   return 0
# }
#
# complete -o nospace -F _completeweka weka

# currently having trouble with selenium in anaconda, so use my "by-hand"
# Python3 install for django work...
setupdjango() {
  # take anaconda out of the PATH...
  unalias ipy
  unalias ipq
  unalias ipn
  export PATH="${PATH/\/Users\/gnperdue\/anaconda\/bin:/}"
  # use my "by-hand" Python3...
  export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/3.4/bin
  alias ipython=ipython3
  alias python=python3
}

setupbrewinstalls() {
  # take anaconda out of the PATH...
  unalias ipy
  unalias ipq
  unalias ipn
  export PATH="${PATH/\/Users\/gnperdue\/anaconda\/bin:/}"
  # don't set up a Python 3
}

setupminiconda2() {
  # take anaconda out of the PATH...
  export PATH="${PATH/\/Users\/perdue\/anaconda\/bin:/}"
  export PATH="${PATH/\/Users\/perdue\/miniconda3\/bin:/}"
  export PATH="/Users/perdue/miniconda2/bin:$PATH"
}

setupminiconda3() {
  # take anaconda out of the PATH...
  export PATH="${PATH/\/Users\/perdue\/anaconda\/bin:/}"
  export PATH="${PATH/\/Users\/perdue\/miniconda2\/bin:/}"
  export PATH="/Users/perdue/miniconda3/bin:$PATH"
}
